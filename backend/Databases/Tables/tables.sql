DROP TABLE IF EXISTS users
DROP TABLE IF EXISTS Questions;
DROP TABLE IF EXISTS Answers;
DROP TABLE IF EXISTS Comments;
DROP TABLE IF EXISTS Tags;
DROP TABLE IF EXISTS QuestionTags;

CREATE TABLE users
(
    userId VARCHAR (100) NOT NULL PRIMARY KEY,
    username VARCHAR(200)NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
	role VARCHAR(10) NOT NULL DEFAULT 'user',
    password VARCHAR(200)NOT NULL,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    welcomeEmailSent BIT DEFAULT=0
);

CREATE TABLE Questions
(
    questionId VARCHAR(100) NOT NULL PRIMARY KEY,
    userId VARCHAR(100) NOT NULL,
    title VARCHAR(255) NOT NULL,
    body VARCHAR(MAX) NOT NULL,
    upvotes INT NOT NULL DEFAULT 0,
    downvotes INT NOT NULL DEFAULT 0,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (userId) REFERENCES users(userId)
);

CREATE TABLE Answers
(
    answerId VARCHAR(100) NOT NULL PRIMARY KEY,
    userId VARCHAR(100) NOT NULL,FOREIGN KEY (userId) REFERENCES users(userId),
    questionId VARCHAR(100) NOT NULL,FOREIGN KEY (questionId) REFERENCES Questions(questionId),
    title VARCHAR(255) NOT NULL,
    body VARCHAR(MAX) NOT NULL,
    upvotes INT NOT NULL DEFAULT 0,
    downvotes INT NOT NULL DEFAULT 0,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
);

CREATE TABLE Comments
(
    commentId VARCHAR(100) NOT NULL PRIMARY KEY,
    userId VARCHAR(100) NOT NULL, FOREIGN KEY (userId) REFERENCES users(userId),
    answerId VARCHAR(100) NOT NULL, FOREIGN KEY (answerId) REFERENCES Answers(answerId),
    body VARCHAR(MAX) NOT NULL,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Tags
(
    tagId VARCHAR(100) NOT NULL PRIMARY KEY,
    tagName VARCHAR(255) NOT NULL,
    body VARCHAR(MAX) NOT NULL
);

CREATE TABLE QuestionTags
(
    questionId VARCHAR(100) NOT NULL, FOREIGN KEY (questionId) REFERENCES Questions(questionId),
    tagId VARCHAR(100) NOT NULL, FOREIGN KEY (tagId) REFERENCES Tags(tagId),
    PRIMARY KEY (questionId, tagId),
);

CREATE TABLE Votes
(
    id INT PRIMARY KEY,
    userId VARCHAR(100) NOT NULL, FOREIGN KEY (userId) REFERENCES users(userId),
    questionId VARCHAR(100) NOT NULL, FOREIGN KEY (questionId) REFERENCES Questions(questionId),
    answerId VARCHAR(100) NOT NULL, FOREIGN KEY (answerId) REFERENCES Answers(answerId),
    voteType VARCHAR(255) NOT NULL,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
);